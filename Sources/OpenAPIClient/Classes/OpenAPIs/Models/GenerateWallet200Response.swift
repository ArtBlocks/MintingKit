//
// GenerateWallet200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GenerateWallet200Response: Codable, JSONEncodable, Hashable {

    public var id: String?
    /** The hashed checksum public address used to identify this wallet. */
    public var ethAddress: String?
    /** The PKCS8-encoded ECC256 public key of the wallet. */
    public var publicKey: String?
    /** The PKCS8-encoded ECC256 private key of the wallet. Only available when `email` is not provided. */
    public var privateKey: String?

    public init(id: String? = nil, ethAddress: String? = nil, publicKey: String? = nil, privateKey: String? = nil) {
        self.id = id
        self.ethAddress = ethAddress
        self.publicKey = publicKey
        self.privateKey = privateKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case ethAddress = "eth_address"
        case publicKey = "public_key"
        case privateKey = "private_key"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(ethAddress, forKey: .ethAddress)
        try container.encodeIfPresent(publicKey, forKey: .publicKey)
        try container.encodeIfPresent(privateKey, forKey: .privateKey)
    }
}

