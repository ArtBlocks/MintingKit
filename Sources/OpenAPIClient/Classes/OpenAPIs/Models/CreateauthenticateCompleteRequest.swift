//
// CreateauthenticateCompleteRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateauthenticateCompleteRequest: Codable, JSONEncodable, Hashable {

    /** The globally unique identifier of the public key credentials. */
    public var credentialId: String?
    /** Information from the authenticator such as the Relying Party ID Hash (`rpIdHash`), a signature counter, test of user presence and user verification flags, and any extensions processed by the authenticator. */
    public var authenticatorData: String?
    /** The client data for the authentication, such as origin and challenge. */
    public var clientDataJSON: String?
    /** An assertion signature over `authenticatorData` and `clientDataJSON` used to verify the authenticity of the request. The assertion signature is created with the private key of keypair that was created during the `navigator.credentials.create()` call and verified using the public key of that same keypair. */
    public var signature: String?

    public init(credentialId: String? = nil, authenticatorData: String? = nil, clientDataJSON: String? = nil, signature: String? = nil) {
        self.credentialId = credentialId
        self.authenticatorData = authenticatorData
        self.clientDataJSON = clientDataJSON
        self.signature = signature
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case credentialId
        case authenticatorData
        case clientDataJSON
        case signature
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(credentialId, forKey: .credentialId)
        try container.encodeIfPresent(authenticatorData, forKey: .authenticatorData)
        try container.encodeIfPresent(clientDataJSON, forKey: .clientDataJSON)
        try container.encodeIfPresent(signature, forKey: .signature)
    }
}

