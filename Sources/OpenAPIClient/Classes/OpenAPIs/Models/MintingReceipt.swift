//
// MintingReceipt.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The logs for the transaction. */
public struct MintingReceipt: Codable, JSONEncodable, Hashable {

    public var blockHash: String?
    public var blockNumber: Int?
    public var contractAddress: String?
    public var cumulativeGasUsed: Int?
    public var from: String?
    public var gasUsed: Int?
    public var logs: AnyCodable?
    public var logsBloom: String?
    public var status: Int?
    public var to: String?
    public var transactionHash: String?
    public var transactionIndex: Int?

    public init(blockHash: String? = nil, blockNumber: Int? = nil, contractAddress: String? = nil, cumulativeGasUsed: Int? = nil, from: String? = nil, gasUsed: Int? = nil, logs: AnyCodable? = nil, logsBloom: String? = nil, status: Int? = nil, to: String? = nil, transactionHash: String? = nil, transactionIndex: Int? = nil) {
        self.blockHash = blockHash
        self.blockNumber = blockNumber
        self.contractAddress = contractAddress
        self.cumulativeGasUsed = cumulativeGasUsed
        self.from = from
        self.gasUsed = gasUsed
        self.logs = logs
        self.logsBloom = logsBloom
        self.status = status
        self.to = to
        self.transactionHash = transactionHash
        self.transactionIndex = transactionIndex
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case blockHash
        case blockNumber
        case contractAddress
        case cumulativeGasUsed
        case from
        case gasUsed
        case logs
        case logsBloom
        case status
        case to
        case transactionHash
        case transactionIndex
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(blockHash, forKey: .blockHash)
        try container.encodeIfPresent(blockNumber, forKey: .blockNumber)
        try container.encodeIfPresent(contractAddress, forKey: .contractAddress)
        try container.encodeIfPresent(cumulativeGasUsed, forKey: .cumulativeGasUsed)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(gasUsed, forKey: .gasUsed)
        try container.encodeIfPresent(logs, forKey: .logs)
        try container.encodeIfPresent(logsBloom, forKey: .logsBloom)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(to, forKey: .to)
        try container.encodeIfPresent(transactionHash, forKey: .transactionHash)
        try container.encodeIfPresent(transactionIndex, forKey: .transactionIndex)
    }
}

