//
// MultiFactorAuthFIDO2API.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MultiFactorAuthFIDO2API {

    /**
     Retrieve FIDO2 key
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createauthenticateBegin(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return createauthenticateBeginWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve FIDO2 key
     - POST /auth/authenticate/begin
     - Retrieve existing FIDO2 credentials generated by a user's second factor of authentication.  This endpoint returns a CBOR-encoded options object (`CredentialRequestOptions`) with the public key and metadata for a user who already has registered FIDO2 credentials.  You must call this endpoint to obtain the correct parameters for the web authentication browser API `navigator.credentials.get()`.
     - BASIC:
       - type: http
       - name: BasicAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<URL> 
     */
    open class func createauthenticateBeginWithRequestBuilder() -> RequestBuilder<URL> {
        let localVariablePath = "/auth/authenticate/begin"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Authenticate FIDO2 device
     
     - parameter createauthenticateCompleteRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createauthenticateComplete(createauthenticateCompleteRequest: CreateauthenticateCompleteRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return createauthenticateCompleteWithRequestBuilder(createauthenticateCompleteRequest: createauthenticateCompleteRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Authenticate FIDO2 device
     - POST /auth/authenticate/complete
     - Complete authentication for a user with FIDO2 credentials.
     - BASIC:
       - type: http
       - name: BasicAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter createauthenticateCompleteRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createauthenticateCompleteWithRequestBuilder(createauthenticateCompleteRequest: CreateauthenticateCompleteRequest? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/auth/authenticate/complete"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createauthenticateCompleteRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Refresh auth token
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createrefreshAuthToken(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreaterefreshAuthToken200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createrefreshAuthTokenWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Refresh auth token
     - POST /auth/refresh-token
     - Refresh the current user's auth token (requires active FIDO2 session).  This URL endpoint does not require any parameters, but requires a current authenticated user session to succeed. It will delete the current authentication token and create a new token returned in the JSON response.  The client must save the new token in order to authenticate future requests.
     - BASIC:
       - type: http
       - name: BasicAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<CreaterefreshAuthToken200Response> 
     */
    open class func createrefreshAuthTokenWithRequestBuilder() -> RequestBuilder<CreaterefreshAuthToken200Response> {
        let localVariablePath = "/auth/refresh-token"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreaterefreshAuthToken200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Register FIDO2 device
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createregisterBegin(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return createregisterBeginWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Register FIDO2 device
     - POST /auth/register/begin
     - Initiate the process of registering a user with FIDO2 auth credentials as a second factor. This endpoint retrieves a CBOR-encoded copy of options to be passed to the Web Authentication browser API `navigator.credentials.create()`. It allows new users to associate a second factor of authentication with their account, wuth support for all FIDO2 devices including FaceID, TouchID, and YubiKey.
     - BASIC:
       - type: http
       - name: BasicAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<URL> 
     */
    open class func createregisterBeginWithRequestBuilder() -> RequestBuilder<URL> {
        let localVariablePath = "/auth/register/begin"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Complete FIDO2 registration
     
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createregisterComplete(body: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return createregisterCompleteWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Complete FIDO2 registration
     - POST /auth/register/complete
     - Complete the FIDO2 credential registration sequence.  This endpoint parses the CBOR-encoded contents of a call to the Web Authentication browser API `navigator.credentials.create()`. It associates a newly-generated public key via a second factor of authentication with the existing user account of the current user.
     - BASIC:
       - type: http
       - name: BasicAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createregisterCompleteWithRequestBuilder(body: URL? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/auth/register/complete"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
