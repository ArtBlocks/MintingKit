//
// WalletManagementAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class WalletManagementAPI {

    /**
     ENS lookup
     
     - parameter ensName: (query) The ENS name to look up. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ensWallet(ensName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EnsWallet200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ensWalletWithRequestBuilder(ensName: ensName).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     ENS lookup
     - GET /wallet/ens
     - Look up an ENS name and return the corresponding ETH address.
     - BASIC:
       - type: http
       - name: BasicAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter ensName: (query) The ENS name to look up. 
     - returns: RequestBuilder<EnsWallet200Response> 
     */
    open class func ensWalletWithRequestBuilder(ensName: String) -> RequestBuilder<EnsWallet200Response> {
        let localVariablePath = "/wallet/ens"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ens_name": ensName.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EnsWallet200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Generate a new wallet
     
     - parameter generateWalletRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func generateWallet(generateWalletRequest: GenerateWalletRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GenerateWallet200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return generateWalletWithRequestBuilder(generateWalletRequest: generateWalletRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Generate a new wallet
     - POST /wallet/generate
     - Securely generate a new wallet using AWS Key Management Service and return the credentials.  This API endpoint does not require any parameters, but requires the requester to be authenticated with valid credentials for a `User` that has permission to create new wallets. If an `email` is provided in the request body, the endpoint will send an email to the provided email address containing a link to an encrypted copy of the new wallet private key along with a password for decryption.
     - BASIC:
       - type: http
       - name: BasicAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter generateWalletRequest: (body)  (optional)
     - returns: RequestBuilder<GenerateWallet200Response> 
     */
    open class func generateWalletWithRequestBuilder(generateWalletRequest: GenerateWalletRequest? = nil) -> RequestBuilder<GenerateWallet200Response> {
        let localVariablePath = "/wallet/generate"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: generateWalletRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenerateWallet200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List wallets
     
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listWallets(page: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListWallets200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return listWalletsWithRequestBuilder(page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List wallets
     - GET /wallet
     - Paginated list of every **Wallet** generated by the current machine.  This REST endpoint can be used to retrieve the addresses and public keys of existing ETH wallets. This endpoint always only returns the wallets the current user created. Private keys are encrypted and cannot be accessed via the API. 
     - BASIC:
       - type: http
       - name: BasicAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter page: (query) A page number within the paginated result set. (optional)
     - returns: RequestBuilder<ListWallets200Response> 
     */
    open class func listWalletsWithRequestBuilder(page: Int? = nil) -> RequestBuilder<ListWallets200Response> {
        let localVariablePath = "/wallet"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListWallets200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Retrieve public key
     
     - parameter id: (path) A unique primary key string identifying this wallet. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func retrieveWallet(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Wallet?, _ error: Error?) -> Void)) -> RequestTask {
        return retrieveWalletWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve public key
     - GET /wallet/{id}
     - Retrieves the public key and Ethereum Checksum Address derived from the public key for a wallet. Requires the primary key `id` of the **Wallet** as input.  After generating a new wallet, the private key of a wallet cannot be retrieved again. 
     - BASIC:
       - type: http
       - name: BasicAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter id: (path) A unique primary key string identifying this wallet. 
     - returns: RequestBuilder<Wallet> 
     */
    open class func retrieveWalletWithRequestBuilder(id: String) -> RequestBuilder<Wallet> {
        var localVariablePath = "/wallet/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Wallet>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
